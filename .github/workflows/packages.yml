name: Build and Package Binaries

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/**.md'
      - '.gitignore'
      - 'LICENSE'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Version suffix (e.g., alpha, beta, rc1)'
        required: false
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'SleepDeprivation'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish-packages:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Determine version
      id: version
      shell: pwsh
      run: |
        $packageVersion = "1.0.0"
        $suffix = ""
        
        if ("${{ github.event_name }}" -eq "release") {
          $packageVersion = "${{ github.ref_name }}" -replace '^v', ''
          $suffix = ""
        } elseif ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version_suffix }}" -ne "") {
          $suffix = "-${{ github.event.inputs.version_suffix }}"
        } else {
          # For push events, create pre-release version
          $shortSha = "${{ github.sha }}".Substring(0, 7)
          $date = Get-Date -Format "yyyyMMddHHmm"
          $suffix = "-dev.$date.$shortSha"
        }
        
        $fullVersion = "$packageVersion$suffix"
        
        echo "VERSION=$fullVersion" >> $env:GITHUB_OUTPUT
        echo "PACKAGE_VERSION=$packageVersion" >> $env:GITHUB_OUTPUT
        echo "VERSION_SUFFIX=$suffix" >> $env:GITHUB_OUTPUT
        
        Write-Host "Package Version: $fullVersion"
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build application
      run: dotnet build --configuration Release --no-restore
      
    - name: Create packages directory
      run: mkdir -p packages
      
    - name: Publish binaries for all architectures
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $runtimes = @('win-x64', 'win-x86', 'win-arm64')
        
        foreach ($runtime in $runtimes) {
          Write-Host "Publishing for $runtime..."
          
          # Framework-dependent build
          dotnet publish `
            --configuration Release `
            --runtime $runtime `
            --self-contained false `
            --output "./publish/$runtime" `
            --verbosity minimal
            
          # Create ZIP package
          $zipPath = "./packages/${{ env.PROJECT_NAME }}-$version-$runtime.zip"
          Compress-Archive -Path "./publish/$runtime/*" -DestinationPath $zipPath
          
          Write-Host "Created: $zipPath"
        }
        
    - name: Upload binary packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-packages-${{ steps.version.outputs.VERSION }}
        path: ./packages/*.zip
        retention-days: 30
        
